/*
    Даний код реалізує набір стратегій валідації (патерн "стратегія")
    для перевірки різних типів даних.
    Стратегії представлені у вигляді класів, кожен з яких
    відповідає за певну логіку валідації,
    реалізуючи інтерфейс ValidationStrategy.
*/

namespace Validation {
    // інтерфейс для класів валідаторів

    export interface ValidationStrategy {
        /*
            Метод validate декларує метод, який повинні
            реалізувати всі валідатори для перевірки значення.
            Повертає булевий результат: true,
            якщо значення відповідає умовам валідації, або false — якщо ні.
        */
        validate(value: string): boolean;

        /*
            Поле message - повідомлення про помилку,
            яке буде використовуватися, якщо валідація не пройде.
            Кожен валідатор має своє унікальне повідомлення.
        */
        message: string;
    }

    // Реалізація правил для перевірки обов'язкових значень.
    export class RequiresValidator implements ValidationStrategy {
        validate(value: string): boolean {
            return value !== '';
        }

        message: string = "Обов'язкове значення";
    }

    // Реалізація правил для перевірки чи значення є числом
    export class NumberValidator implements ValidationStrategy {
        validate(value: string): boolean {
            return /\d+/.test(value);
        }

        message: string = 'Значення має бути числом';
    }

    // Реалізація правил для перевірки чи значення є мейлом
    export class EmailValidator implements ValidationStrategy {
        validate(value: string): boolean {
            return /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/i.test(value);
        }

        message: string = 'Значення має бути  email адресою';
    }
}

/* Як працює код:
1 - Кожен клас валідатора реалізує інтерфейс ValidationStrategy,
тобто має метод validate та повідомлення про помилку.
2 - При валідації кожного поля даних у класі Validator
викликається відповідний валідатор через метод ValidatorSelector.select().
3- Якщо значення не відповідає критеріям валідації
(наприклад, порожній рядок для обов'язкового поля або некоректна електронна пошта), повертається false, і повідомлення про помилку додається до результату валідації.


Загальний потік:
1 - RequiresValidator: Перевіряє, чи поле заповнене.
2 - NumberValidator: Перевіряє, чи є значення числом.
3 - EmailValidator: Перевіряє, чи є значення дійсною електронною адресою.


Ці валідатори можуть використовуватися в різних місцях,
де потрібно забезпечити валідацію даних на основі різних правил.
 */
